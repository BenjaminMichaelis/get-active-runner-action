name: "Determine Runner for Jobs"
description: "Checks the status of self-hosted runners and selects a runner based on availability."
author: "@BenjaminMichaelis"
branding:
  icon: "check-circle"
  color: "green"

inputs:
  primary-runner:
    description: "The labels of the self-hosted runner."
    required: true
  fallback-runner:
    description: "The runner to use if the primary runner is not available."
    required: true
  github-token:
    description: "The GitHub token."
    required: true

outputs:
  use-runner:
    description: "The runner to be used for subsequent jobs."

runs:
  using: 'composite'
  steps:
    - run: |
        # Extract the organization name
        org=${{ github.repository }}
        org=${org%%/*}

        # Fetch the list of repository runners
        response=$(curl -H "Authorization: token ${{ inputs.github_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/runners)

        # If no runners are returned for the repository, check at the organization level
        if [ -z "$response" ]; then
          response=$(curl -H "Authorization: token ${{ inputs.github_token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/orgs/$org/actions/runners)
        fi

        # Check if the response is not null before parsing it with jq
        if [ "$response" != "null" ]; then
          echo "$response" | jq -r '.runners[] | select(.status=="online" and .busy==false and (.labels[].name | contains("${{ inputs.primary_runner }}")) )'
        else
          echo "No runners available"
        fi
      shell: bash
    - run: |
        if [ -n "${{ steps.check_runners.outputs.result }}" ]; then
          echo "::set-output name=runner::${{ inputs.primary_runner }}"
        else
          echo "::set-output name=runner::${{ inputs.fallback_runner }}"
        fi
      shell: bash